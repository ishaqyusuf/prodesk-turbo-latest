model CustomerTransaction {
    id            Int                  @unique @default(autoincrement())
    authorId      Int?
    status        String?
    amount        Float
    walletId      Int?
    paymentMethod String?
    type          String? //wallet, transaction
    description   String?              @db.Text
    meta          Json?                @db.Json
    createdAt     DateTime?            @default(now()) @db.Timestamp(0)
    updatedAt     DateTime?            @updatedAt
    deletedAt     DateTime?            @db.Timestamp(0)
    wallet        CustomerWallet?      @relation(fields: [walletId], references: [id], onDelete: Cascade)
    salesPayments SalesPayments[]
    refundTx      RefundTransactions[]
    squarePayment SquarePayments?      @relation(fields: [squarePID], references: [id])
    squarePID     String?
    author        Users?               @relation(fields: [authorId], references: [id])

    @@index([authorId])
    @@index([walletId])
    @@index([squarePID])
}

model CustomerWallet {
    id           Int                   @unique @default(autoincrement())
    balance      Float
    accountNo    String?               @unique
    meta         Json?                 @db.Json
    customer     Customers?            @relation(fields: [id], references: [walletId], onDelete: Cascade)
    transactions CustomerTransaction[]
    createdAt    DateTime?             @default(now()) @db.Timestamp(0)
    updatedAt    DateTime?             @updatedAt
    deletedAt    DateTime?             @db.Timestamp(0)
    refunds      Refunds[]
}

model SalesPayments {
    id               Int                  @unique @default(autoincrement())
    note             String?
    authorId         Int?
    squarePaymentsId String?
    // customerId    Int
    transactionId    Int?
    orderId          Int
    amount           Float
    tip              Float?
    meta             Json?                @db.Json
    status           String? // success,pending,paid
    deletedAt        DateTime?            @db.Timestamp(0)
    createdAt        DateTime?            @default(now()) @db.Timestamp(0)
    updatedAt        DateTime?            @updatedAt
    order            SalesOrders          @relation(name: "salesPayment", fields: [orderId], references: [id], onDelete: Cascade)
    checkout         SalesCheckout?
    // customer      Customers            @relation(fields: [customerId], references: [id], onDelete: Cascade)
    transaction      CustomerTransaction? @relation(fields: [transactionId], references: [id], onDelete: Cascade)
    commissions      SalesCommision[]
    author           Users?               @relation(fields: [authorId], references: [id])
    squarePayments   SquarePayments?      @relation(fields: [squarePaymentsId], references: [id])

    @@index([authorId])
    @@index([orderId])
    // @@index([customerId])
    @@index([transactionId])
    @@index([squarePaymentsId])
}

model SquarePayments {
    id              String                @id @default(cuid())
    paymentId       String?               @unique
    status          String                @default("created")
    squareOrderId   String?
    paymentMethod   String //link,terminal
    paymentLink     String?
    terminalId      String?
    amount          Float
    tip             Float?
    meta            Json?                 @db.Json
    deletedAt       DateTime?             @db.Timestamp(0)
    createdAt       DateTime?             @default(now()) @db.Timestamp(0)
    updatedAt       DateTime?             @updatedAt
    createdById     Int?
    paymentTerminal PaymentTerminals?     @relation(fields: [terminalId], references: [terminalId])
    customerTxs     CustomerTransaction[]
    createdBy       Users?                @relation(fields: [createdById], references: [id])
    orders          SquarePaymentOrders[]
    salesPayments   SalesPayments[]
    checkout        SalesCheckout?

    @@index([terminalId])
    @@index([createdById])
}

model SquarePaymentOrders {
    id              String         @id @default(cuid())
    orderId         Int
    squarePaymentId String
    squarePayment   SquarePayments @relation(fields: [squarePaymentId], references: [id])
    order           SalesOrders?   @relation(fields: [orderId], references: [id])

    @@index([squarePaymentId])
    @@index([orderId])
}

model PaymentTerminals {
    terminalId   String    @unique
    terminalName String
    deletedAt    DateTime? @db.Timestamp(0)
    createdAt    DateTime? @default(now()) @db.Timestamp(0)
    updatedAt    DateTime? @updatedAt

    payments SquarePayments[]
}

model SalesCheckout {
    id              String            @id @default(cuid())
    paymentId       String?           @unique
    userId          Int?
    status          String?
    paymentType     String?
    terminalId      String?
    terminalName    String?
    amount          Float?
    tip             Float?            @default(0)
    orderId         Int?
    meta            Json?             @db.Json
    deletedAt       DateTime?         @db.Timestamp(0)
    createdAt       DateTime?         @default(now()) @db.Timestamp(0)
    updatedAt       DateTime?         @updatedAt
    order           SalesOrders?      @relation(fields: [orderId], references: [id])
    createdBy       Users?            @relation(fields: [userId], references: [id])
    salesPaymentsId Int?              @unique
    squarePaymentId String?           @unique
    paymentSlip     SalesPayments?    @relation(fields: [salesPaymentsId], references: [id])
    squarePayment   SquarePayments?   @relation(fields: [squarePaymentId], references: [id])
    tenders         CheckoutTenders[]

    @@index([orderId])
    @@index([userId])
}

model CheckoutTenders {
    id              String        @id @default(cuid())
    tenderId        String        @unique
    // squarePaymentId String
    // squareOrderId   String
    salesCheckoutId String
    status          String
    amount          Float?
    tip             Float?
    deletedAt       DateTime?     @db.Timestamp(0)
    createdAt       DateTime?     @default(now()) @db.Timestamp(0)
    checkout        SalesCheckout @relation(fields: [salesCheckoutId], references: [id])

    @@index([salesCheckoutId])
}
